name: Run k6 Performance Tests

on:
  workflow_dispatch: # Permite execu√ß√£o manual pela interface do GitHub

jobs:
  performance-test:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üìö Install dependencies
        run: npm install

      - name: üß± Compile TypeScript
        run: npx tsc

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub (only if secrets exist)
        run: |
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" && -n "${{ secrets.DOCKER_TOKEN }}" ]]; then
            echo "Logging into Docker Hub..."
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          else
            echo "Skipping Docker login. Missing secrets."
          fi

      - name: üèóÔ∏è Build Docker services
        run: docker compose build

      - name: üöÄ Start InfluxDB and Grafana
        run: docker compose up -d influxdb grafana

      - name: ‚è≥ Wait for InfluxDB to be ready
        run: |
          echo "Waiting for InfluxDB to be ready..."
          for i in {1..10}; do
            if docker compose exec influxdb influx ping &>/dev/null; then
              echo "‚úÖ InfluxDB is ready!"
              break
            fi
            echo "Attempt $i: InfluxDB not ready yet..."
            sleep 5
          done

      - name: üß™ Run k6 Performance Tests
        run: |
          TEST_FILES=(
            "/scripts/scenarios/products/get-categories-details.js"
            "/scripts/scenarios/products/get-category-names.js"
            "/scripts/scenarios/products/get-products-by-category.js"
            "/scripts/scenarios/products/get-products-select-fields.js"
            "/scripts/scenarios/products/get-products-sort-asc.js"
            "/scripts/scenarios/products/get-products-sort-desc.js"
            "/scripts/scenarios/products/get-search-products.js"
            "/scripts/scenarios/products/post-add-product.js"
            "/scripts/scenarios/products/put-update-product.js"
            "/scripts/scenarios/products/search-products.js"
          )

          for TEST_FILE in "${TEST_FILES[@]}"; do
            echo "üöÄ Running test: $TEST_FILE"
            docker compose run --rm k6 run "$TEST_FILE" \
              --env RATE=1 \
              --env TIME_UNIT=1s \
              --env DURATION=5s \
              --env PRE_ALLOCATED_VUS=10 \
              --env MAX_VUS=50

            EXIT_CODE=$?
            if [ $EXIT_CODE -ne 0 ]; then
              echo "‚ùå Test failed: $TEST_FILE"
              # Descomente a linha abaixo para parar no primeiro erro
              # exit 1
            else
              echo "‚úÖ Test passed: $TEST_FILE"
            fi
          done

      - name: üßπ Stop Docker services
        if: always()
        run: docker compose down
